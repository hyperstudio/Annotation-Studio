<div class="span3 hidden-phone hidden-tablet">
	<div id="annotation-well" class="affix">
		<div class="btn-group" data-toggle="buttons-radio" id="view-chooser">
			<button class="viewchoice btn btn-small active" id="userview">Mine</button>
			<button class="viewchoice btn btn-small" id="groupview">Group</button>
			<button class="viewchoice btn btn-small" id="classview">Class</button>
			<% if current_user.has_role?(:admin) %>
			<button class="viewchoice btn btn-small btn-inverse" id="adminview">All</button>
			<% end %>
		</div>

		<script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js"></script>
		<script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js"></script>
		<script src="http://cdnjs.cloudflare.com/ajax/libs/mustache.js/0.4.2/mustache.min.js"></script>

		<ul id="annotation-list"></ul>
		<script type="text/template" id="comment-template">
			<span id="sb{{uuid}}" href="#full{{uuid}}" data-highlight="#hl{{uuid}}" rel="tooltip" title="{{username}}" class="highlightlink comment">{{{text}}}</span>
			<span id="quote{{uuid}}" class="sbquote details">&quot;{{{quote}}}&quot;</span>
			<span id="text{{uuid}}" class="sbtext details">{{{text}}}</span>
			<span id="info{{uuid}}" class="sbinfo details">{{username}}</span>
			<div id="tags{{uuid}}" class="sbtags details">{{#tags}}<span class="label">{{.}}</span> {{/tags}}</div>
		</script>
		<script type="text/template" id="highlight-template">
			<span id="sb{{uuid}}" data-highlight="#hl{{uuid}}" rel="tooltip" title="{{username}}" class="highlightlink highlight sbquote">&quot;{{{quote}}}&quot;</span>
			<span id="quote{{uuid}}" class="sbquote details">&quot;{{{quote}}}&quot;</span>
			<div id="tags{{uuid}}" class="sbtags details">{{#tags}}<span class="label">{{.}}</span> {{/tags}}</div>
		</script>
	</div><!--/well -->
</div><!--/span3 -->
<%= javascript_include_tag "sidebar" %>
<script type="text/javascript" charset="utf-8">
jQuery(function ($) {
	// $('#spinnermodal').modal('show');

	var groups = "<%= current_user.rep_group_list %>".split(/, /);
	var subgroups = "<%= current_user.rep_subgroup_list %>".split(/, /);

	// Bootstrap Backbone Sidebar //
	var sidebar = new Sidebar.App();
	Backbone.history.start({pushState: true, root: window.location})


    var studio = $('#textcontent').annotator().annotator('setupPlugins', {}, {
        <% if current_user.has_role?(:admin) && ENV["ANNOTATOR_FILTER"] == 'true' %>
        <% else %>
        Filter: false,
        <% end %>
        Auth: {
        	token: '<%= @jwt %>'
        },
        Store: {
            prefix: '<%= ENV["API_URL"] %>',
            annotationData: {
                'uri': [location.protocol, '//', location.host, location.pathname].join(''),
                "groups": groups,
                "subgroups": subgroups,
                // "username": 'Jamie F.',
            },
            loadFromSearch: {
                'limit': 5,
                "groups": groups,
                "subgroups": subgroups,
                'user': "<%= current_user.email %>",
                'mode': 'user', // default mode -- user can switch via sidebar button.
                'context': 'document',
                'uri': [location.protocol, '//', location.host, location.pathname].join('')
            }
        },
        Markdown: false, // use RichText instead
        AnnotateItPermissions: false, // this is built into the kitchen sink, so cancel it
        Permissions: {
        	user: "<%= current_user.email %>",
        	permissions: {
                'read': ['<%= current_user.email %>'], // default: review mode; this is what users will need to control
                'update': ['<%= current_user.email %>'], // no one else can ever update
                'delete': ['<%= current_user.email %>'], // no one else can ever delete
                'admin': ['<%= current_user.email %>'] // no one else can ever admin
        	},
        	userString: function (user) {
        		return "<%= current_user.first_name_last_initial %>";
            },
	        // Permissions settings per-annotation
	        showViewPermissionsCheckbox: true,
	        showEditPermissionsCheckbox: false
        }
    });
	var optionsRichText = {
		editor_enabled: <%= ENV["ANNOTATOR_RICHTEXT"] %>,
		tinymce: {
			'toolbar': '<%= ENV["ANNOTATOR_RICHTEXT_CONFIG"] %>'
		}
	}
	studio.annotator('addPlugin', 'RichText', optionsRichText)


	var subscriber = $('#textcontent').annotator().data('annotator');

	// Create a UUID for a given annotation if needed.
	// Once created, this shouldn't be changed.
	var createUuid = function(annotation) {
		if (annotation.uuid == null) {
			annotation.uuid = Math.uuid(8, 16);
			console.info("New uuid for annotation: '"+annotation.quote+"': "+ annotation.uuid);
		}
		else {
			console.info("Existing uuid for annotation: '"+annotation.quote+"': "+ annotation.uuid);
		}
	};

	// Create username for a given annotation if needed.
	var addUserName = function(annotation) {
		if (annotation.username == null) {
			annotation.username = "<%= current_user.first_name_last_initial %>";
			console.info("New username for annotation: <%= current_user.first_name_last_initial %>");
		}
	};

	// addLinkId(annotation);

	// Add UUIDs to highlights so sidebar and highlights can link to one another.
	var addUuid;
	var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };
	addUuid = __bind(function(a) {
		if (a.highlights[0] != null) {
			a.highlights[0].id = "hl"+ a.uuid;
			a.highlights[0].title = a.user;
		}
		else {
			console.info("Err...");
		}
	}, this);
	
	
	var stopSpinner = function(){
		$('#spinnermodal').modal('hide');
	};
	
	var createAndAddUuid = function(annotation){
		createUuid(annotation);
		addUuid(annotation);
	};

	// Update the sidebar with local annotation data
	var loadSidebar = function(annotation) {
		setTimeout(function() {
		    sidebar.listAnnotations(subscriber.dumpAnnotations());
		}, 100);
	};
	
	// Remove all comment icons and load sidebar with local data
	var deleteFromSidebar =	function(annotation) {
		$(".icon-comment").remove();
		setTimeout(function() {
		    sidebar.listAnnotations(subscriber.dumpAnnotations());
		}, 100);
	};

	var showAnnId =  function(annotation) {
		var newAnn = new Sidebar.Annotation(annotation);
		console.info(newAnn.get("uuid"));
	};
	

	$('#userview').on('click', function (e) {
		// $('#spinnermodal').modal('show');
		console.info('Clicked userview');
		$('.viewchoice').removeClass("active");
		var hilites = $('.annotator-hl');
		hilites.contents().unwrap();
		$(this).addClass("active");
		var loadOptions = {
			'limit': 1000,
			"groups": groups,
			"subgroups": subgroups,
			'user': "<%= current_user.email %>",
			'mode': 'user',
			'context': 'document',
			'uri': [location.protocol, '//', location.host, location.pathname].join('')
		}
		subscriber.plugins.Store.loadAnnotationsFromSearch(loadOptions);
	});
	$('#groupview').on('click', function (e) {
		$('#spinnermodal').modal('show');
		console.info('Clicked groupview');
		$('.viewchoice').removeClass("active");
		var hilites = $('.annotator-hl');
		hilites.contents().unwrap();
		$(this).addClass("active");
		var loadOptions = {
			'limit': 1000,
			"groups": groups,
			"subgroups": subgroups,
			'user': "<%= current_user.email %>",
			'mode': 'group',
			'context': 'document',
			'uri': [location.protocol, '//', location.host, location.pathname].join('')
		}
		subscriber.plugins.Store.loadAnnotationsFromSearch(loadOptions);
	});
	$('#classview').on('click', function (e) {
		$('#spinnermodal').modal('show');
		console.info('Clicked classview');
		$('.viewchoice').removeClass("active");
		var hilites = $('.annotator-hl');
		hilites.contents().unwrap();
		$(this).addClass("active");
		var loadOptions = {
			'limit': 1000,
			"groups": groups,
			"subgroups": subgroups,
			'user': "<%= current_user.email %>",
			'mode': 'class',
			'context': 'document',
			'uri': [location.protocol, '//', location.host, location.pathname].join('')
		}
		subscriber.plugins.Store.loadAnnotationsFromSearch(loadOptions);
	});

	<%# if current_user.has_role?(:admin) %>
	$('#adminview').on('click', function (e) {
		$('#spinnermodal').modal('show');
		console.info('Clicked adminview');
		$('.viewchoice').removeClass("active");
		var hilites = $('.annotator-hl');
		hilites.contents().unwrap();
		$(this).addClass("active");
		var loadOptions = {
			'limit': 1000,
			"groups": groups,
			"subgroups": subgroups,
			'user': "<%= current_user.email %>",
			'mode': 'admin',
			'context': 'document',
			'uri': [location.protocol, '//', location.host, location.pathname].join('')
		}
		subscriber.plugins.Store.loadAnnotationsFromSearch(loadOptions);
	});
	<%# end %>


	var handleHash = function(annotation) {
		var hash = window.location.hash
		if (hash.length > 0){
			console.info(hash);
			setTimeout(function(){
				$('html,body').animate({scrollTop: $(hash).offset().top - 150}, 500);
			},1000);
		}
	};


	// When the annotator loads remote data, update sidebar
	subscriber.subscribe('annotationsLoaded', loadSidebar);
	subscriber.subscribe('annotationsLoaded', stopSpinner);
	subscriber.subscribe('annotationsLoaded', handleHash);

	// Update all highlights with UUIDs
	subscriber.subscribe('annotationsLoaded', __bind(function(annotations) {
		annotations.map(addUuid); // copies the UUID value from the object field to the highlight spans attribute value.
	}, this));

	// Add the UUID to the local annotation object and to the highlight span before saving
	subscriber.subscribe('beforeAnnotationCreated', createUuid); // creates, if need be, and adds, both to object, and to highlight.
	subscriber.subscribe('beforeAnnotationCreated', addUserName); // creates, if need be, and adds, both to object, and to highlight.


	// Once the local object has been created, load the sidebar from local data (already contains UUID)
	subscriber.subscribe('annotationCreated', loadSidebar);
	subscriber.subscribe('annotationCreated', addUuid);

	// When the local object is updated (contains previously created/stored UUID), load the sidebar from local data
	subscriber.subscribe('annotationUpdated', loadSidebar);
	subscriber.subscribe('annotationDeleted', deleteFromSidebar);
	
	// mixpanel.track("Loaded Document");
});
</script>
