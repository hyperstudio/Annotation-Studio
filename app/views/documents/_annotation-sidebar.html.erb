  <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js"></script>
  <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js"></script>
  <script src="http://cdnjs.cloudflare.com/ajax/libs/mustache.js/0.4.2/mustache.min.js"></script>
  <div id="annotation-well" class="affix">
    <ul id="annotation-list"></ul>
    <script type="text/template" id="comment-template">
      <span id="sb{{uuid}}" href="#full{{uuid}}" data-highlight="#hl{{uuid}}" rel="tooltip" title="{{username}}" class="highlightlink comment">{{{text}}}</span>
      <span id="quote{{uuid}}" class="sbquote details">&quot;{{{quote}}}&quot;</span>
      <span id="text{{uuid}}" class="sbtext details">{{{text}}}</span>
      <span id="info{{uuid}}" class="sbinfo details">{{username}}</span>
      <div id="tags{{uuid}}" class="sbtags details">{{#tags}}<span class="label label-default">{{.}}</span> {{/tags}}</div>
    </script>
    <script type="text/template" id="highlight-template">
      <span id="sb{{uuid}}" data-highlight="#hl{{uuid}}" rel="tooltip" title="{{username}}" class="highlightlink highlight sbquote">&quot;{{{quote}}}&quot;</span>
      <span id="quote{{uuid}}" class="sbquote details">&quot;{{{quote}}}&quot;</span>
      <div id="tags{{uuid}}" class="sbtags details">{{#tags}}<span class="label label-default">{{.}}</span> {{/tags}}</div>
    </script>
  </div><!--/well -->

<%= javascript_include_tag "sidebar" %>
<%= javascript_include_tag "melcatalog-plugin" %>

<script type="text/javascript" charset="utf-8">
jQuery(function ($) {

  var groups = "<%= current_user.rep_group_list %>".split(/, /);
  var subgroups = "<%= current_user.rep_subgroup_list %>".split(/, /);
  var annotatorOptions = {'readOnly': <%= @document.deleted? %>};

  // Bootstrap Backbone Sidebar //
  var sidebar = new Sidebar.App();
  window.sidebar = sidebar
  Backbone.history.start({pushState: true, root: window.location});
  var studio = $('#textcontent').annotator(annotatorOptions).annotator('setupPlugins', {}, {
      <% unless current_user.has_role?(:admin) && ENV["ANNOTATOR_FILTER"] == 'true' %>
      Filter: false,
      <% end %>
      Auth: {
        token: '<%= session["jwt"] %>'
      },
      Store: {
          prefix: '<%= ENV["API_URL"] %>',
          annotationData: {
              'uri': [location.protocol, '//', location.host, location.pathname].join(''),
              "groups": groups,
              "subgroups": subgroups,
              // "username": 'Jamie F.',
          },
          loadFromSearch: {
              'limit': 100,
              "groups": groups,
              "subgroups": subgroups,
              'user': "<%= current_user.email %>",
              'mode': 'user', // default mode -- user can switch via sidebar button.
              'context': 'document',
              'uri': [location.protocol, '//', location.host, location.pathname].join('')
          }
      },
      Markdown: false, // use RichText instead
      AnnotateItPermissions: false, // this is built into the kitchen sink, so cancel it
      Permissions: {
        user: "<%= current_user.email %>",
        permissions: {
              'read': ['<%= current_user.email %>'], // default: review mode; this is what users will need to control
              'update': ['<%= current_user.email %>'], // no one else can ever update
              'delete': ['<%= current_user.email %>'], // no one else can ever delete
              'admin': ['<%= current_user.email %>'] // no one else can ever admin
        },
        userString: function (user) {
          return user.split("@")[0]
        },
        // Permissions settings per-annotation
        showViewPermissionsCheckbox: true,
        showEditPermissionsCheckbox: false
      }
  });

  var optionsRichText = {
    editor_enabled: '<%= ENV["ANNOTATOR_RICHTEXT"] %>',
    tinymce: {
      <% if ENV["CATALOG_ENABLED"] === 'true' %>
         'toolbar': '<%= ENV["ANNOTATOR_RICHTEXT_WITH_CATALOG"] %>',
      <% else %>
        'toolbar': '<%= ENV["ANNOTATOR_RICHTEXT_CONFIG"] %>',
      <% end %>
      'image_dimensions': false
    }
  };

  studio.annotator("addPlugin", "Touch");
  var subscriber = $('#textcontent').annotator().data('annotator');
  // $('.annotator-item').addClass('hide');

  <% if !mobile_device? %>
    studio.annotator('addPlugin', 'RichText', optionsRichText);
  <% end %>

  // support for the MEL catalog plugin
  studio.annotator('addPlugin', 'MelCatalogue' );

    // these three click and tap handlers manage the rich text editor show and hide on mobile and desktop
  $('.annotator-button').on('tap', function(){
    console.log('button tapped');
    $('.annotator-item').removeClass('hide');
  });

  $('.annotator-adder').on('click', function(){
    $('.annotator-item').removeClass('hide');
  });

  $('.annotator-edit').on('tap', function(){
    $('.annotator-item').removeClass('hide');
  });

  // Create a UUID for a given annotation if needed.
  // Once created, this shouldn't be changed.
  var createUuid = function(annotation) {
    if (annotation.uuid == null) {
      annotation.uuid = Math.uuid(8, 16);
      console.info("New uuid for annotation: '"+annotation.quote+"': "+ annotation.uuid);
    }
    else {
      console.info("Existing uuid for annotation: '"+annotation.quote+"': "+ annotation.uuid);
    }
  };

  // Create username for a given annotation if needed.
  var addUserName = function(annotation) {
    if (annotation.username == null) {
      annotation.username = "<%= current_user.first_name_last_initial %>";
      console.info("New username for annotation: <%= current_user.first_name_last_initial %>");
    }
  };

  // Add UUIDs to highlights so sidebar and highlights can link to one another.
  var addUuid;
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };
  addUuid = __bind(function(a) {
    if (a.highlights[0] != null) {
      a.highlights[0].id = "hl"+ a.uuid;
      a.highlights[0].title = a.user;
    }
    else {
      console.info("Annotation: " + a.uuid + "has no highlights.");
    }
  }, this);

  var stopSpinner = function(){
    $('#spinnermodal').modal('hide');
  };

  var createAndAddUuid = function(annotation){
    createUuid(annotation);
    addUuid(annotation);
  };

  // Update the sidebar with local annotation data
  var loadSidebar = function(annotation) {
    setTimeout(function() {
        sidebar.listAnnotations(subscriber.dumpAnnotations());
    }, 100);
  };

  // Remove all comment icons and load sidebar with local data
  var deleteFromSidebar = function(annotation) {
    $(".glyphicon-comment").remove();
    setTimeout(function() {
        sidebar.listAnnotations(subscriber.dumpAnnotations());
    }, 100);
  };

  var showAnnId =  function(annotation) {
    var newAnn = new Sidebar.Annotation(annotation);
    console.info(newAnn.get("uuid"));
  };

  $('#userview').on('click', { mode: 'user', id: 'userview' }, modeFilter);
  $('#groupview').on('click', { mode: 'group', id: 'groupview' }, modeFilter);
  $('#classview').on('click', { mode: 'class', id: 'classview' }, modeFilter);
  <% if current_user.has_role?(:admin) %>
    $('#adminview').on('click', { mode: 'admin', id: 'adminview' }, modeFilter);
  <% end %>

  function modeFilter(event) {
    $('.viewchoice').removeClass("active");

    $('#spinnermodal').modal('show');

    var loadOptions = {
      'limit': 1000,
      "groups": groups,
      "subgroups": subgroups,
      'user': "<%= current_user.email %>",
      'mode': event.data.mode,
      'context': 'document',
      'uri': [location.protocol, '//', location.host, location.pathname].join(''),
      'tags': $('#tagsearchbox').val()
    };

    var reload_data = reloadAnnotations(loadOptions);
    var cleanup_document = cleanupDocument();

    $.when(reload_data).then(cleanup_document).done(refreshAnnotations(), loadSidebar());
  }

  // preform reload
  function tagFilter(event) {
    console.log(event);
    var tags = $('#tagsearchbox').val();
    var loadOptions = {
      'limit': 1000,
      "groups": groups,
      "subgroups": subgroups,
      'user': "<%= current_user.email %>",
      'mode': getMode(),
      'context': 'document',
      'uri': [location.protocol, '//', location.host, location.pathname].join(''),
      'tags': tags
    };
    var reload_data = reloadAnnotations(loadOptions);
    var cleanup_document = cleanupDocument();
    $.when(reload_data).then(cleanup_document).done(refreshAnnotations(), loadSidebar());
    $('*[data-role="remove"]').hide();
  }

  $('#tagsearchbox').tagsinput()
  $('#tagsearchbox').on('itemAdded', tagFilter);
  $('#tagsearchbox').on('itemRemoved', tagFilter);
  // $('*[data-role="remove"]').hide();

  function getMode() {
    var activeElems = $('.viewchoice.active')
    for (var i=0; i<activeElems.length; i++) {
      var elem = activeElems[i];
      if (elem.id.substring(elem.id.length-4) === "view") {
        return elem.id.substring(0,elem.id.length-4)
      }
    }
  }

  function reloadAnnotations(loadOptions) {
    var dfd = new $.Deferred();
    subscriber.plugins.Store.annotations = [];
    if (subscriber.plugins.Store.loadAnnotationsFromSearch(loadOptions)) {
      setTimeout(function() {
        dfd.resolve("Reload complete.");
      }, 100);
      console.log("Reload complete.");
    }
    else {
      console.log("Reload failed.");
      dfd.reject("Reload failed.");
    }
    return dfd.promise();
  }

  function cleanupDocument () {
    var dfd = new $.Deferred();
    if (removeHilites()) {
      console.log("Cleanup complete.");
      dfd.resolve("Cleanup complete.");
    }
    else {
      console.log("Cleanup failed.");
      dfd.reject("Cleanup failed.");
    }
    return dfd.promise();
  }

  function removeHilites() {
    $(".glyphicon-comment").remove();
    var hilites = $('.annotator-hl');
    if (hilites.length > 0) {
      hilites.children().unwrap();
      hilites.contents().unwrap();
    }
    return true;
   }

  function refreshAnnotations() {
    subscriber.loadAnnotations(subscriber.plugins.Store.annotations);
    $('#spinnermodal').modal('hide');
  }

  var handleHash = function(annotation) {
    var hash = window.location.hash
    if (hash.length > 0){
      console.info(hash);
      setTimeout(function(){
        $('html,body').animate({scrollTop: $(hash).offset().top - 150}, 500);
      },1000);
    }
  };

  var parentIndex = function(editor, annotation) {
    if (!annotation.parentIndex > 0) {
      console.log("No current annotation.parentIndex: "+ annotation.parentIndex);
      var node = $(".annotator-hl-temporary");
      var parent = node.parent()[0];
      var parentIndex = $( "#textcontent" ).find( "*" ).index(parent)
      annotation.parentIndex = parentIndex;
      console.log("Added annotation.parentIndex: "+ annotation.parentIndex);
    }
    else {
      console.log("Existing parentIndex: " + annotation.parentIndex + "; not adding a new one.");
    }
  };

  // When the annotator loads remote data, update sidebar
  subscriber.subscribe('annotationsLoaded', loadSidebar);
  subscriber.subscribe('annotationsLoaded', stopSpinner);
  subscriber.subscribe('annotationsLoaded', handleHash);
  // subscriber.subscribe('annotationsLoaded', tagSuggest);
  subscriber.subscribe('annotationEditorShown', parentIndex);

  // Update all highlights with UUIDs
  subscriber.subscribe('annotationsLoaded', __bind(function(annotations) {
    annotations.map(addUuid); // copies the UUID value from the object field to the highlight spans attribute value.
  }, this));

  // Add the UUID to the local annotation object and to the highlight span before saving
  subscriber.subscribe('beforeAnnotationCreated', createUuid); // creates, if need be, and adds, both to object, and to highlight.
  subscriber.subscribe('beforeAnnotationCreated', addUserName); // creates, if need be, and adds, both to object, and to highlight.


  // Once the local object has been created, load the sidebar from local data (already contains UUID)
  subscriber.subscribe('annotationCreated', loadSidebar);
  subscriber.subscribe('annotationCreated', addUuid);

  // When the local object is updated (contains previously created/stored UUID), load the sidebar from local data
  subscriber.subscribe('annotationUpdated', loadSidebar);
  subscriber.subscribe('annotationDeleted', deleteFromSidebar);
  $(".annotator-checkbox label").text('Allow my groups to view this annotation');

  // When the user scrolls, call showAndHideAnnotations
  sidebar.filtered = true;
  var lazyShowAndHideAnnotations = _.debounce(
    function() { sidebar.showAndHideAnnotations() },
    30
  );
  $(window).scroll(lazyShowAndHideAnnotations);

  // Toggle filtered variable
  $('#visibleannotations').on('click', function(){
    sidebar.filtered = true;
    sidebar.showAndHideAnnotations();
  });
  $('#allannotations').on('click', function(){
    sidebar.filtered = false;
    sidebar.showAllAnnotations();
  });
});
</script>
