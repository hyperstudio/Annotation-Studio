// Generated by CoffeeScript 1.6.3
var _ref,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Annotator.Plugin.RichText = (function(_super) {
	__extends(RichText, _super);
	
	
	//Default tinymce configuration
	RichText.prototype.options = {
		tinymce: {
			selector: "li.annotator-item textarea",
			plugins: "media image insertdatetime link code",
			menubar: false,
			statusbar: false,
			toolbar_items_size: 'small',
			extended_valid_elements : "iframe[src|frameborder|style|scrolling|class|width|height|name|align|id]",
    		toolbar: "insertfile undo redo | styleselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image media | code ",
		}
	};

	function RichText(element,options) {
		_ref = RichText.__super__.constructor.apply(this, arguments);
		return _ref;
	};


	RichText.prototype.pluginInit = function() {
		var annotator = this.annotator,
			editor = this.annotator.editor;
		//Check that annotator is working
		if (!Annotator.supported()) {
			return;
		}
		
		//Editor Setup
		annotator.editor.addField({
			type: 'input',
			load: this.updateEditor,
		});
		
		//Viewer setup
		annotator.viewer.addField({
			load: this.updateViewer,
		});
		
		
		annotator.subscribe("annotationEditorShown", function(){
			$(annotator.editor.element).find('.mce-tinymce')[0].style.display='block';
			$(annotator.editor.element).find('.mce-container').css('z-index',3000000000);
			annotator.editor.checkOrientation();
		});
		annotator.subscribe("annotationEditorHidden", function(){
			$(annotator.editor.element).find('.mce-tinymce')[0].style.display='none';
		});
		
		//set listener for tinymce;
		this.options.tinymce.setup = function(ed) {
			ed.on('change', function(e) {
				//set the modification in the textarea of annotator
				$(editor.element).find('textarea')[0].value = tinymce.activeEditor.getContent();
			});
			ed.on('Init', function(ed){
				$('.mce-container').css('z-index','3090000000000000000');
			});
		};
		tinymce.init(this.options.tinymce);
	};
	
	RichText.prototype.updateEditor = function(field, annotation) {
		var text = typeof annotation.text!='undefined'?annotation.text:'';
		tinymce.activeEditor.setContent(text); 
		$(field).remove(); //this is the auto create field by annotator and it is not necessary
	}
	
	RichText.prototype.updateViewer = function(field, annotation) {
		var textDiv = $(field.parentNode).find('div:first-of-type')[0];
		textDiv.innerHTML =annotation.text;
		$(textDiv).addClass('richText-annotation');
		$(field).remove(); //this is the auto create field by annotator and it is not necessary
	}
	
	return RichText;

})(Annotator.Plugin);